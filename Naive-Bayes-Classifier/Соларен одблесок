from sklearn.preprocessing import OrdinalEncoder
from sklearn.naive_bayes import CategoricalNB
import math

if __name__ == '__main__':
    
    dataset = [...]
for row in dataset:
    row[-1] = int(row[-1])
encoder = OrdinalEncoder()
encoder.fit([dataset[i][:-1] for i in range(0, len(dataset))])

train_set = dataset[0:math.ceil(0.75*len(dataset))]
test_set = dataset[math.ceil(0.75*len(dataset)):]

X = [train_set[i][:-1] for i in range(0, len(train_set))]
X = encoder.transform(X)
Y = [train_set[i][-1] for i in range(0, len(train_set))]

clf = CategoricalNB()
clf.fit(X, Y)

test_set_x = encoder.transform([test_set[i][:-1] for i in range(0, len(test_set))])

accuracy = 0
for i in range(0, len(test_set)):
    predict = clf.predict([test_set_x[i]])
    if predict == test_set[i][-1]:
        accuracy += 1
print(accuracy/len(test_set))

vlez = [el for el in input().split(' ')]
vlez = encoder.transform([vlez])

temp = clf.predict(vlez)
strings = [str(integer) for integer in temp]
a_string = "". join(strings)
an_integer = int(a_string)
print(an_integer)
print(clf.predict_proba(vlez))
