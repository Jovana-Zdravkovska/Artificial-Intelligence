from sys import maxsize as infinity
import bisect
class Pacman:
    def __init__(self,info,s):
        self.mat = [["-","-","-","-","-","-","#","-","#","#"],["-","-","#","#","#","-","-","-","-","#"],
               ["-","-","-","-","-","-","-","-","-","#"],["-","-","-","-","-","-","#","-","-","#"],
               ["-","#","-","-","-","#","#","#","-","-"],["-","#","-","-","-","-","#","-","-","-"],
               ["#","#","#","-","-","-","-","-","-","#"],["-","-","-","-","-","-","-","-","-","-"],
               ["-","#","-","-","#","-","-","#","#","-"],["-","-","-","-","#","-","-","#","#","-"]]
        self.initial = info
        self.goal=s
        
    def successor(self,state):
        x = state[0]
        y = state[1]
        sos = state[2]
        succ = dict ()
        if(sos=="istok"):
            if(x<9 and self.mat[x+1][y]!="#"):
                succ['ProdolzhiPravo']=(x+1,y,'istok')
                
            if(x>0 and self.mat[x-1][y]!="#"):
                succ['ProdolzhiNazad']=(x-1,y,'zapad')
                
            if(y<9 and self.mat[x][y+1]!="#"):
                succ['SvrtiLevo']=(x,y+1,'sever')
                
            if(y>0 and self.mat[x][y-1]!="#"):
                succ['SvrtiDesno']=(x,y-1,'jug')
                
        if(sos=="zapad"):
            if(x>0 and self.mat[x-1][y]!="#"):
                succ['ProdolzhiPravo']=(x-1,y,'zapad')
                
            if(x<9 and self.mat[x+1][y]!="#"):
                succ['ProdolzhiNazad']=(x+1,y,'istok')
                
            if(y>0 and self.mat[x][y-1]!="#"):
                succ['SvrtiLevo']=(x,y-1,'jug')
                
            if(y<9 and self.mat[x][y+1]!="#"):
                succ['SvrtiDesno']=(x,y+1,'sever')
                
        if(sos=="sever"):
            if(y<9 and self.mat[x][y+1]!="#"):
                succ['ProdolzhiPravo']=(x,y+1,'sever')
                
            if(y>0 and self.mat[x][y-1]!="#"):
                succ['ProdolzhiNazad']=(x,y-1,'jug')
                
            if(x>0 and self.mat[x-1][y]!="#"):
                succ['SvrtiLevo']=(x-1,y,'zapad')
                
            if(x<9 and self.mat[x+1][y]!="#"):
                succ['SvrtiDesno']=(x+1,y,'istok')
                
        if(sos=="jug"):
            if(y>0 and self.mat[x][y-1]!="#"):
                succ['ProdolzhiPravo']=(x,y-1,'jug')
                
            if(y<9 and self.mat[x][y+1]!="#"):
                succ['ProdolzhiNazad']=(x,y+1,'sever')
                
            if(x<9 and self.mat[x+1][y]!="#"):
                succ['SvrtiLevo']=(x+1,y,'istok')
                
            if(x>0 and self.mat[x-1][y]!="#"):
                succ['SvrtiDesno']=(x-1,y,'zapad')
                
        return succ
        
    def h(self, node):
        x = node.state[0]
        y = node.state[1]
        rez = []
        for x1,y1 in self.goal:
            rez.append(abs(x-x1)+abs(y-y1))
        return min(rez)
        
        
    def actions(self,state):
        return self.successor(state).keys()
        
    def result(self, state, action):
        return self.successor(state)[action]
        
    def goal_test(self,state):
        pozicija=(state[0],state[1])
        return pozicija in self.goal
        
class Node:
    def __init__(self, state, parent=None, action=None, path_cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0 
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node %s>" % (self.state,)

    def __lt__(self, node):
        return self.state < node.state

    def expand(self, problem):
        return [self.child_node(problem, action)
            for action in problem.actions(self.state)]

    def child_node(self, problem, action):
        next_state = problem.result(self.state, action)
        return Node(next_state, self, action)

    def solution(self):
        return [node.action for node in self.path()[1:]]

    def solve(self):
        return [node.state for node in self.path()[0:]]

    def path(self):
        x, result = self, []
        while x:
            result.append(x)
            x = x.parent
        result.reverse()
        return result

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)
        
class PriorityQueue():

    def __init__(self, order=min, f=lambda x: x):
        assert order in [min, max]
        self.data = []
        self.order = order
        self.f = f

    def append(self, item):
        bisect.insort_right(self.data, (self.f(item), item))

    def extend(self, items):
        for item in items:
            bisect.insort_right(self.data, (self.f(item), item))

    def pop(self):
        if self.order == min:
            return self.data.pop(0)[1]
        return self.data.pop()[1]

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return any(item == pair[1] for pair in self.data)

    def __getitem__(self, key):
        for _, item in self.data:
            if item == key:
                return item

    def __delitem__(self, key):
        for i, (value, item) in enumerate(self.data):
            if item == key:
                self.data.pop(i)
        
def memoize(fn, slot=None):
    if slot:
        def memoized_fn(obj, *args):
            if hasattr(obj, slot):
                return getattr(obj, slot)
            else:
                val = fn(obj, *args)
                setattr(obj, slot, val)
                return val
    else:
        def memoized_fn(*args):
            if args not in memoized_fn.cache:
                memoized_fn.cache[args] = fn(*args)
            return memoized_fn.cache[args]

        memoized_fn.cache = {}
    return memoized_fn
    
def best_first_graph_search(problem, f):
    f = memoize(f, 'f')
    node = Node(problem.initial)
    if problem.goal_test(node.state):
        return node
    frontier = PriorityQueue(min, f)
    frontier.append(node)
    explored = set()
    while frontier:
        node = frontier.pop()
        if problem.goal_test(node.state):
            problem.initial=node.state
            return node
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                frontier.append(child)
            elif child in frontier:
                incumbent = frontier[child]
                if f(child) < f(incumbent):
                    del frontier[incumbent]
                    frontier.append(child)
    return None
    
def astar_search(problem, h=None):
    h = memoize(h or problem.h, 'h')
    return best_first_graph_search(problem, lambda n: n.path_cost + h(n))
    


a=int(input())
c=int(input())
d=input()
e=int(input())
tock= []
for i in range(e):
    f=input()
    g=f.split(',')
    tock.append((int(g[0]),int(g[1])))
b = Pacman((a,c,d),tock)
if b.goal==[]:
    print('[]')
else:
    j=0
    resenie = []
    while j<e:
        resenie += astar_search(b).solution()
        b.goal.remove((b.initial[0],b.initial[1]))
        j+=1
    print(resenie)
