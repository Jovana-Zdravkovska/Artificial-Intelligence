import warnings
from sklearn.exceptions import ConvergenceWarning
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPClassifier

data = [...]
def divide_sets(dataset):
    M_class = [x for x in dataset if x[0] == 'M']
    B_class = [x for x in dataset if x[0] == 'B']

    train_set = M_class[:int(len(M_class) * 0.7)] + B_class[:int(len(B_class) * 0.7)]
    test_set = M_class[int(len(M_class) * 0.7):] + B_class[int(len(B_class) * 0.7):]

    return train_set, test_set


if __name__ == '__main__':
    warnings.filterwarnings('ignore', category=ConvergenceWarning)
    train_set, test_set = divide_sets(data)

    train_x = [x[1:] for x in train_set]
    train_y = [x[0] for x in train_set]
    test_x = [x[1:] for x in test_set]
    test_y = [x[0] for x in test_set]

    scaler = MinMaxScaler(feature_range=(-1, 1))
    scaler.fit(train_x)

    nevroni_br = int(input())
    clf = MLPClassifier(nevroni_br, activation='relu', learning_rate_init=0.001, max_iter=20, random_state=0)

    clf.fit(scaler.transform(train_x), train_y)

    tp, fp, tn, fn = 0, 0, 0, 0
    predictions = clf.predict(scaler.transform(test_x))
    for pred, true in zip(predictions, test_y):
        if true == 'M':
            if pred == true:
                tp += 1
            else:
                fn += 1
        else:
            if pred == true:
                tn += 1
            else:
                fp += 1

    precision = tp / (tp + fp)
    recall = tp / (tp + fn)

    tp1, fp1, tn1, fn1 = 0, 0, 0, 0
    predictions1 = clf.predict(scaler.transform(train_x))
    for pred, true in zip(predictions1, train_y):
        if true == 'M':
            if pred == true:
                tp1 += 1
            else:
                fn1 += 1
        else:
            if pred == true:
                tn1 += 1
            else:
                fp1 += 1

    precision1 = tp1 / (tp1 + fp1)
    recall1 = tp1 / (tp1 + fn1)

    print(f'Preciznost so trenirachkoto mnozhestvo: {precision1}')
    print(f'Odziv so trenirachkoto mnozhestvo: {recall1}')
    print(f'Preciznost so testirachkoto mnozhestvo: {precision}')
    print(f'Odziv so testirachkoto mnozhestvo: {recall}')
